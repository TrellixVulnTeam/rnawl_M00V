# -*- coding: utf-8 -*-
# __author__ = 'qinjincheng'

from optparse import OptionParser
import pandas as pd
import os

parser = OptionParser(description='Filter PFAM DOMAIN generated by hmmer')
parser.add_option('-i', '--input', dest='input', help='Input raw file')
parser.add_option('-e', '--evalue', dest='evalue', type=float, help='The upper limit of evalue')
parser.add_option('-k', '--keep', dest='keep', help='Input file containing Seq_id that needs retaining')
parser.add_option('-o', '--output', dest='output', help='Output filtered file')
(opts, args) = parser.parse_args()

def main(file_in, evalue, file_out, list_in=None):
    print 'INFO: start reading {}'.format(file_in)
    df = pd.read_table(file_in, header=0, index_col=0)
    print 'INFO: start filtering {} by evalue < {}'.format(file_in, evalue)
    df = df[df['DomainE-Value'] < float(evalue)]
    if list_in and os.path.isfile(list_in):
        print 'INFO: start reading {} for keeping specified records'.format(list_in)
        seq_id_list = [i.strip() for i in open(list_in)]
        df = df.query('index in @seq_id_list')
    df.to_csv(file_out, sep='\t')
    if os.path.getsize(file_out) > 0:
        print 'INFO: succeed in exporting {}'.format(file_out)

if __name__ == '__main__':
    if all(map(hasattr, [opts] * 3, ['input', 'evalue', 'output'])):
        if opts.keep:
            main(opts.input, opts.evalue, opts.output, opts.keep)
        else:
            main(opts.input, opts.evalue, opts.output)
    else:
        parser.print_help()