# -*- coding: utf-8 -*-
# __author__ = 'qinjincheng'

from optparse import OptionParser
import pandas as pd
import os

parser = OptionParser(description='Filter BLAST2GO TABLE generated by blast2go')
parser.add_option('-i', '--input', dest='input', help='Input raw file')
parser.add_option('-e', '--evalue', dest='evalue', type=float, help='The upper limit of evalue')
parser.add_option('-c', '--identity', dest='identity', type=float, help='The lower limit of identity')
parser.add_option('-s', '--positive', dest='positive', type=float, help='The lower limit of positive')
parser.add_option('-k', '--keep', dest='keep', help='Input file containing Seq_id that needs retaining')
parser.add_option('-o', '--output', dest='output', help='Output filtered file')
(opts, args) = parser.parse_args()

def main(file_in, evalue, identity, positive, file_out, list_in=None):
    print 'INFO: start filtering {} by following parameters'.format(file_in)
    print 'INFO: evalue < {}'.format(evalue)
    print 'INFO: identity > {}'.format(identity)
    print 'INFO: positive > {}'.format(positive)
    if list_in and os.path.isfile(list_in):
        print 'INFO: start reading {} for keeping specified records'.format(list_in)
        seq_id_list = [i.strip() for i in open(list_in)]
    with open(file_out, 'w') as f:
        print 'INFO: start processing {}'.format(file_in)
        for n, line in enumerate(open(file_in)):
            if len(line.strip().split('\t')) == 4:
                f.write(line)
            elif len(line.strip().split('\t')) == 7:
                items = line.strip().split('\t')
                if list_in and items[0] not in seq_id_list:
                    print 'INFO: drop line {} due to disqualification of condition'.format(n + 1)
                    continue
                if float(items[4]) < evalue and float(items[5]) > identity and float(items[6]) > positive:
                    f.write(line)
                else:
                    print 'INFO: drop line {} due to disqualification of condition'.format(n + 1)
            else:
                print 'INFO: drop line {} due to disqualification of format'.format(n + 1)
    if os.path.getsize(file_out) > 0:
        print 'INFO: succeed in exporting {}'.format(file_out)

if __name__ == '__main__':
    if all(map(hasattr, [opts] * 5, ['input', 'evalue', 'identity', 'positive', 'output'])):
        if opts.keep:
            main(opts.input, float(opts.evalue), float(opts.identity), float(opts.positive), opts.output, opts.keep)
        else:
            main(opts.input, float(opts.evalue), float(opts.identity), float(opts.positive), opts.output)
    else:
        parser.print_help()