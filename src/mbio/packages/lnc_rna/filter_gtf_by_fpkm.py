# -*- coding: utf-8 -*-
# __author__ = 'shicaiping, qinjincheng'

from optparse import OptionParser
import re
import os

parser = OptionParser(description='Filter GTF file generated by cufflinks with low fpkm')
parser.add_option('-i', '--input', dest='input', help='Input filter_range GTF file')
parser.add_option('-c', '--cut', dest='cut', help='Cut off of FPKM for filtering')
parser.add_option('-o', '--output', dest='output', help='Output filter_fpkm GTF file')
(opts, args) = parser.parse_args()

def main(filter_range, fpkm_cut, filter_fpkm):
    filter_records = dict()
    print 'INFO: start processing {}'.format(filter_range)
    with open(filter_range) as f:
        for line in f:
            items = line.strip().split('\t')
            if items[2] == 'transcript':
                if re.search(r'gene_id \"CUFF', items[8]):
                    if float(items[8].split(';')[2].split('"')[1]) < float(fpkm_cut):
                        key = items[8].split(';')[0] + items[8].split(';')[1]
                        filter_records[key] = 1
                        print 'INFO: record {} -> FPKM {}'.format(key, items[8].split(';')[2].split('"')[1])
    print 'INFO: find {} records that satisfy FPKM < {}'.format(len(filter_records), fpkm_cut)
    with open(filter_range) as f1, open(filter_fpkm, 'w') as f2:
        for n, line in enumerate(f1):
            items = line.strip().split('\t')
            if filter_records.has_key(items[8].split(';')[0] + items[8].split(';')[1]):
                print 'INFO: drop {} at line {}'.format(line, n + 1)
            else:
                f2.write(line)
    if os.path.getsize(filter_fpkm) > 0:
        print 'INFO: succeed in exporting {}'.format(filter_fpkm)

if __name__ == '__main__':
    if opts.input and opts.cut and opts.output:
        main(opts.input, opts.cut, opts.output)
    else:
        parser.print_help()