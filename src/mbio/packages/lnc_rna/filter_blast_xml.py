# -*- coding: utf-8 -*-
# __author__ = 'qinjincheng'

from optparse import OptionParser
import xml.etree.cElementTree as ET
import os

parser = OptionParser(description='Filter XML file generated by blast')
parser.add_option('-i', '--input', dest='input', help='Input XML file')
parser.add_option('-e', '--evalue', dest='evalue', help='The upper limit of evalue')
parser.add_option('-c', '--identity', dest='identity', help='The lower limit of identity')
parser.add_option('-s', '--positive', dest='positive', help='The lower limit of positive')
parser.add_option('-k', '--keep', dest='keep', help='Input file containing query-def that needs retaining')
parser.add_option('-o', '--output', dest='output', help='Output filtered XML file')
(opts, args) = parser.parse_args()

head = '''<?xml version="1.0"?>
<!DOCTYPE BlastOutput PUBLIC "-//NCBI//NCBI BlastOutput/EN" "http://www.ncbi.nlm.nih.gov/dtd/NCBI_BlastOutput.dtd">
'''

def main(file_in, evalue, identity, positive, file_out, list_in=None):
    print 'INFO: start parsing {} as ET object'.format(file_in)
    tree = ET.parse(file_in)
    root = tree.getroot()
    BlastOutput_iterations = root.find('BlastOutput_iterations')
    print 'INFO: start filtering {} by following parameters'.format(BlastOutput_iterations)
    if list_in and os.path.isfile(list_in):
        print 'INFO: start reading {} for making list containing query-def need to be retained'.format(list_in)
        query_list = [i.strip() for i in open(list_in)]
    print 'INFO: evalue < {}'.format(evalue)
    print 'INFO: identity > {}'.format(identity)
    print 'INFO: positive > {}'.format(positive)
    for Iteration in BlastOutput_iterations.findall('Iteration'):
        if list_in and Iteration.find('Iteration_query-def').text not in query_list:
            print 'INFO: drop {}'.format(Iteration)
            BlastOutput_iterations.remove(Iteration)
            continue
        for Hit in Iteration.find('Iteration_hits').findall('Hit'):
            hsp_evalue = float(Hit.find('Hit_hsps').find('Hsp').find('Hsp_evalue').text)
            hsp_identity = float(Hit.find('Hit_hsps').find('Hsp').find('Hsp_identity').text)
            hsp_positive = float(Hit.find('Hit_hsps').find('Hsp').find('Hsp_positive').text)
            hsp_align_len = float(Hit.find('Hit_hsps').find('Hsp').find('Hsp_align-len').text)
            hsp_identity_rate = hsp_identity / hsp_align_len * 100
            hsp_positive_rate = hsp_positive / hsp_align_len * 100
            if hsp_evalue > evalue or hsp_identity_rate < identity or hsp_positive_rate < positive:
                Iteration.find('Iteration_hits').remove(Hit)
                print 'INFO: drop {}'.format(Hit)
                print 'INFO: hsp_evalue = {}'.format(hsp_evalue)
                print 'INFO: hsp_identity_rate = {}'.format(hsp_identity_rate)
                print 'INFO: hsp_positive_rate = {}'.format(hsp_positive_rate)
    else:
        print 'INFO: start writing results into {}'.format(file_out)
        tree.write(file_out)
    print 'INFO: start adding file header to {}'.format(file_out)
    with open(file_out, 'r+') as f:
        body = f.read()
        f.seek(0, 0)
        f.write(head + body)
    if os.path.getsize(file_out) > 0:
        print 'INFO: succeed in exporting {}'.format(file_out)

if __name__ == '__main__':
    if opts.input and opts.evalue and opts.identity and opts.positive and opts.output:
        if opts.keep:
            main(opts.input, float(opts.evalue), float(opts.identity), float(opts.positive), opts.output, opts.keep)
        else:
            main(opts.input, float(opts.evalue), float(opts.identity), float(opts.positive), opts.output)
    else:
        parser.print_help()